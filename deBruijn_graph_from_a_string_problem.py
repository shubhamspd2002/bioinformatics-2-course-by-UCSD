def de_bruijn_graph(k, text):
    # Create a dictionary to store the adjacency list
    graph = {}
    
    # Generate k-mers from the given text
    kmers = [text[i:i+k] for i in range(len(text) - k + 1)]
    
    # Build the adjacency list
    for kmer in kmers:
        prefix = kmer[:-1]
        suffix = kmer[1:]
        
        if prefix in graph:
            graph[prefix].append(suffix)
        else:
            graph[prefix] = [suffix]
    
    # Sort the adjacency list for each node
    for node in graph:
        graph[node].sort()
    
    return graph

# Sample Input
k = 12
text="ATCGGTTCGGGCCACGCCTGATTCCAAGGGTAGGACTGCGTGTCGCTGGCATCGTGCACCGTAGATGCGCATGCAAGGGGCGTTTTTTTTACGGGTTACGCGACGGAAATGTCTTAGTAACCAGATGTTATACTGTTTGCCTCAGCCGGGGTAACAATGGTTACACATGGAGTCTGAAACCGAAGTCTCACGTGCGCACCGACGGCATCAGTTATCGGACCTTACCCGACCTATGCGAATGGATTGGCTCTAGTATTGGCCTCAAACACCACAAGGGTATAATCCTAACCAAGACCCGTATACATATCCAATAGAGCACTACTCCACGGGGCTGTAGAGAGTAGTGAAACGGAGTTACATTCGGCGCGGACTGGGTATCAGATCGCGAGCGAGATAAGGTCGTCTTCGGGTGGTGCACGATTAGCGGTGTAATAGAAACGGCTTAGTTTGGAAAGACCAACTCTGTCTGCGGGCGTGAGGGATGGCAGACTCGCGATTCGTTTGGCTCATACAGCTTCGCTGTAAACATGTCATCATCCTATGAGAGTTAGCGAATGTCCCGAACCAACTCACTGATTTATCTAAAGTCGCCACAGGTCTGTTTGGGTCGCAGTAAATTCGCTGAGATGATTGCAAGACTTGTTGAGGCAACAGTCCTCGTGAGGTCCAGTCTACGCAAACTCCGATTCCAATCGGACAGCCTCCATAAAGGCTGGTTATTCGTTAGATTGATTTACATCACAGAATTCTTTCACAAAGGCTATAAAGCTGTGATGGCCAACACATAAGAAGGTAATTTTGTCTAACCGATGTGCTCCACGGGCTCAGATGAATTAACTCCCGGTCTACCCCGCCTTTTCTTCCTTCTACTCTATCCATGAATCGGAAGCTAGGTGTTCACAATCGCTCGCTATCGGGGCCGTACGTGCCTAAGGTGTGGTTCCATTCAAAGGCTGTATCACACCTCCGTTCTAGTACAGGATCTCTTAGGCCTAGGTTTGTCCTCGTATTGGCAGCATCCTAAAATATAACCTTGGATTGCTTTACCGTTTTCGGCGATTTATATTTGCGGCAGCCCCAAACTAAAGTGTGAAGTTCGATCTCTAAGGTTGTTTCCCTCTGAATGCATAGCACTTTTGGTTTGACCCCGGATCGTGCTTTGCTTCATATTGAATATGGTAGGTGGGGCAGCCGCCTAACGCCGACCTAAATTTTTGCAGTCGTTATATGTACACCGTCTATCCAAGCTGCCCGGGGCCCATCCGCTGCCTCAGTACTTCTAAAACCGAACGACTCACTATCGACCCCGTAAGCCATACCGGTCTGAGATATGTGATTAATGGGTGCTGTCCTGCGGAAAGCCTCCCAGGCCAGAGTTACTTTGAAAGTAATCTGCTTAGATTCCCTAAGGATGTTAACACCGTCTATTAGGCCATACTTCCTTCTATCAACAAGGCGTCCTTAACGAATATCTAATCGGTTGAAACGGTCCTACGTACTACACGACGCTGAATAAGTAAACCTAATGGGGCGCTTTCGGCACAACCAGCTGTGCCCCATACTAATCCAAGTTTGAGAGCCATTTGTGAGAGTTTATAAAGTATAAAGTGCTCTTCCCCCCCCAAAAAGGAGAGATCCAACGGTTTTCAGCTCGTGGGGGCGCGTCGTCGCCCCTTAGAGAAGCATGACGGAATTGGGCACGTGCGTAAACATGCGTTATAAAGAGAAGGTCACATCATAATAACCGAGAGTCGGGTGTGTAAAAAAGAAACTTAATGATATCCCATCAACTCGAGAAAGGGGTTAAACTAGGTGCCGCGAATTTTCGGAAGAACCTGGGCTCACAAAGTTATGTCGCGCGATTATAGAAGAAATTTTCGCGTATAGAGATTACTTTCCCTTTCTATGAAGCATAATGCCTAAGCGGGTTGGCCACTTTCGCGTCCCTGATAGGGCGACAGGGTTCCATGAATTGTCTGCCCCAGCGTCGCATAAGCGTG"


# Generate and print the De Bruijn graph
result = de_bruijn_graph(k, text)
for node in result:
    neighbors = " ".join(result[node])
    print(f"{node}: {neighbors}")

#run this code in python playground because here it gives incomplete op. try to incorporate 1) 2) in this and find the count of the edges generated.